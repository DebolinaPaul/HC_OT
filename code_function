# A really simple pure-R hierarchical clustering implementation. Can
# be used like hclust(d, method).

dis = function(x)
{
  x = as.matrix(x)
  u = apply(x*x,1,sum) %*% matrix(1.0,1,nrow(x))
  sqrt(abs(u + t(u) - 2 * x %*% t(x)))
}

iorder = function(m)
{
  N = nrow(m) + 1
  iorder = rep(0,N)
  iorder[1] = m[N-1,1]
  iorder[2] = m[N-1,2]
  loc = 2
  for(i in seq(N-2,1))
  {
    for(j in seq(1,loc))
    {
      if(iorder[j] == i)
      {
        iorder[j] = m[i,1]
        if(j==loc)
        {
          loc = loc + 1
          iorder[loc] = m[i,2]
        } else
        {
          loc = loc + 1
          for(k in seq(loc, j+2)) iorder[k] = iorder[k-1]
          iorder[j+1] = m[i,2]
        }
      }
    }
  }
  -iorder
}

clus_dist=function(C,l,k){
  if(is.vector(C)==1){
    C=matrix(C)
    C=t(C)
  }
  n=dim(C)[1]
  m=dim(C)[2]
  if((m>k)&&(n>k)){
    #   cat('alu')
    x=rep(1/n,n)
    y=rep(1/m,m)
    x=as.matrix(x)
    y=as.matrix(y)
    #   l=60/median(C)
    a=Sinkhorn(x,y,C,l)
    a=a$Distance
  }else{
    a=min(C)
    #    cat('begun')
  }
  return(a)
}


hc = function(d,l, method=c("single","complete","average","median"))
{
  if(!is.matrix(d)) d = as.matrix(d)
  # Pick a clustering function:
  method_fn = switch(match.arg(method),
                     single   = min,
                     complete = max,
                     average  = mean,
                     median  = median)
  N = nrow(d)
  C=d
  diag(d)=Inf
  n = -(1:N)                       # Tracks group membership
  m = matrix(0,nrow=N-1, ncol=2)   # hclust merge output
  h = rep(0,N-1)                   # hclust height output
  for(j in seq(1,N-1))
  {
    # Find smallest distance and corresponding indices
    h[j] = min(d)
    # We can use == here (I think) because we know we'll get exactly a 0 value.
    i = which(d - h[j] == 0, arr.ind=TRUE)
    # We could get more than one, but we just want to merge one pair, so take 1st.
    i = i[1,,drop=FALSE]
    p = n[i]
    # R's convention is to order each m[j,] pair as follows:
    p = p[order(p)]
    m[j,] = p
    # Agglomerate this pair and all previous groups they belong to
    # into the current jth group:
    grp = c(i, which(n %in% n[i[1,n[i]>0]]))
    n[grp] = j
    # Concoct replacement distances that consolidate our pair using `method`:
    r = apply(d[i,],2,method_fn)
    for(index in 1:N){
      if(r[index]<Inf){
        I=which(n==n[index])
        J=which(n==j)
        r[index]=clus_dist(C[I,J],l,N/5)
      }
    }
    # Move on to the next minimum distance, excluding current one by modifying
    # the distance matrix:
    d[min(i),] = d[,min(i)] = r
    d[min(i),min(i)]        = Inf
    d[max(i),] = d[,max(i)] = Inf
  }
  # Return something similar to the output from hclust.
 
  structure(list(merge = m, height = h, order = iorder(m),
                 labels = rownames(d), method = method,
                 call = match.call(), dist.method = "euclidean"),
            class = "hclust")
}
